@model ADYC.WebUI.ViewModels.PeriodDateListViewModel

@{
    ViewBag.Title = Model.Title;
    ViewBag.PageHeader = Model.Title;

    ViewBag.BreadcrumbLinks = new Dictionary<string, string>
    {
        ["Terms"] = Url.Action("Index"),
        [Model.Title] = "",
    };

    ViewBag.ActiveBreadcrumb = Model.Title;
}

@if (!Model.IsCurrentTerm)
{
    <div class="callout callout-info">
        <h4><i class="fa fa-info-circle"></i> Term</h4>

        <p>This term is not the current term, you are not allowed to make changes at this time.</p>
    </div>
}

<div class="box box-info">
    <div class="box-header with-border">
        <h3 class="box-title"><i class="fa fa-info-circle"></i> Term</h3>
        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
        </div>
    </div>
    <div class="box-body">
        <dl class="dl-horizontal">
            <dt>Term Name</dt>
            <dd>@Model.Term.Name (@Model.Term)</dd>
            <dt>Enrollment Deadline</dt>
            <dd>@Model.Term.EnrollmentDeadLine.ToString("MMMM dd, yyyy")</dd>
            <dt>Enrollment Withdraw</dt>
            <dd>@Model.Term.EnrollmentDropDeadLine.ToString("MMMM dd, yyyy")</dd>
            <dt>Current Term</dt>
            <dd>@(Model.IsCurrentTerm ? "Yes" : "No")</dd>
        </dl>
    </div>
</div>

@using (Html.BeginForm("SavePeriodDates", "Terms", FormMethod.Post))
{
    @Html.HiddenFor(m => Model.TermId)
    @Html.HiddenFor(m => Model.IsNew)

    @Html.AntiForgeryToken()

    <div class="box box-primary">
        <div class="box-header with-border">
            <div class="btn-toolbar">
                <div class="btn-group">
                    <a href="@Url.Action("Index")" class="btn btn-default btn-sm"><i class="fa fa-arrow-circle-left"></i> Back to list of terms</a>
                </div>
            </div>
        </div>
        <div class="box-body">
            <table class="table table-bordered table-hover table-striped dataTable" role="grid">
                <thead>
                    <tr>
                        <th>
                            Period
                        </th>
                        <th>
                            Start Date
                        </th>
                        <th>
                            End Date
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Periods.Count(); i++)
                    {
                        object htmlAttr = null;

                        if (Model.IsCurrentTerm)
                        {
                            htmlAttr = new { @class = "form-control" };
                        }
                        else
                        {
                            htmlAttr = new { @class = "form-control", @disabled = "disabled" };
                        }

                        <tr>
                            <td>
                                @Html.HiddenFor(m => Model.PeriodDates[i].PeriodId)
                                @Html.HiddenFor(m => Model.PeriodDates[i].TermId)
                                @Model.Periods.ElementAt(i).Name
                            </td>
                            <td>
                                @Html.EditorFor(model => Model.PeriodDates[i].StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => Model.PeriodDates[i].StartDate, "", new { @class = "text-red" })
                            </td>
                            <td>
                                @Html.EditorFor(model => Model.PeriodDates[i].EndDate, new { htmlAttributes = htmlAttr })
                                @Html.ValidationMessageFor(model => Model.PeriodDates[i].EndDate, "", new { @class = "text-red" })
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (Model.IsCurrentTerm)
        {
            <div class="box-footer">
                <button class="btn btn-primary" type="submit">Save</button>
            </div>
        }
    </div>
}

@section styles {
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
}

@section Scripts {
    <script>
        $(document).ready(function () {
            var startDateElements = $("[id$=__StartDate]");
            var endDateElements = $("[id$=__EndDate]");

            var minDate = $.datepicker.parseDate("mm/dd/yy", "@Model.Term.StartDate.ToShortDateString()");
            var maxDate = $.datepicker.parseDate("mm/dd/yy", "@Model.Term.EndDate.ToShortDateString()");
            var numOfPeriods = @Model.Periods.Count();

            startDateElements.each(function (index) {
                var dp = $(this);

                dp.datepicker({
                    showButtonPanel: true,
                    changeMonth: true,
                    changeYear: true,
                    numberOfMonths: 2
                });

                dp.datepicker("option", "minDate", minDate);
                dp.datepicker("option", "maxDate", maxDate);

                dp.on("change", function () {
                    var thisDate = getDate(this);
                    thisDate.setDate(thisDate.getDate() + 1);

                    for (var i = index + 1; i < numOfPeriods; i++) {
                        $(startDateElements[i]).datepicker("option", "minDate", thisDate);
                    }

                    for (var i = index; i < numOfPeriods; i++) {
                        $(endDateElements[i]).datepicker("option", "minDate", thisDate);
                    }
                });
            });

            endDateElements.each(function (index) {
                var dp = $(this);

                dp.datepicker({
                    showButtonPanel: true,
                    changeMonth: true,
                    changeYear: true,
                    numberOfMonths: 2
                });

                dp.datepicker("option", "minDate", minDate);
                dp.datepicker("option", "maxDate", maxDate);

                dp.on("change", function () {
                    var thisDate = getDate(this);
                    thisDate.setDate(thisDate.getDate() + 1);

                    for (var i = index + 1; i < numOfPeriods; i++) {
                        $(startDateElements[i]).datepicker("option", "minDate", thisDate);
                        $(endDateElements[i]).datepicker("option", "minDate", thisDate);
                    }
                });
            });

            var dateFormat = "mm/dd/yy";

            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }

                return date;
            }
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
}