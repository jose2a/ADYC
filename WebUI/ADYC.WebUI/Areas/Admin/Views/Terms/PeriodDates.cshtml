@model ADYC.WebUI.ViewModels.PeriodDateListViewModel

@{
    ViewBag.Title = Model.Title;
}

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

<h1>@Model.Title</h1>

@if (!Model.IsCurrentTerm)
{
    <div class="alert alert-info" role="alert">
        This term is not the current term, you are not allowed to make changes at this time.
    </div>
}

@using (Html.BeginForm("SavePeriodDates", "Terms", FormMethod.Post))
{
    @Html.HiddenFor(m => Model.TermId)
    @Html.HiddenFor(m => Model.IsNew)

    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-sm-8">
            <ul class="term-info">
                <li><h5><strong>Term Name: </strong>@Model.Term.Name (@Model.Term)</h5></li>
                <li>
                    <h5><strong>Enrollment Deadline: </strong>@Model.Term.EnrollmentDeadLine.ToString("MMMM dd, yyyy")</h5>
                    <h5><strong>Enrollment Withdraw: </strong>@Model.Term.EnrollmentDropDeadLine.ToString("MMMM dd, yyyy")</h5>
                </li>
                <li>
                    <h5><strong>Current Term: </strong> @(Model.IsCurrentTerm ? "Yes" : "No")</h5>
                </li>
            </ul>
        </div>
    </div>

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "Please fix the following errors:", new { @class = "text-danger" })

        <table id="terms" class="table table-bordered table-striped display">
            <thead>
                <tr>
                    <th>
                        Period
                    </th>
                    <th>
                        Start Date
                    </th>
                    <th>
                        End Date
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Periods.Count(); i++)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(m => Model.PeriodDates[i].PeriodId)
                            @Html.HiddenFor(m => Model.PeriodDates[i].TermId)
                            @Model.Periods.ElementAt(i).Name
                        </td>
                        <td>
                            @if (Model.IsCurrentTerm)
                            {
                                @Html.EditorFor(model => Model.PeriodDates[i].StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => Model.PeriodDates[i].StartDate, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.EditorFor(model => Model.PeriodDates[i].StartDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                            }
                        </td>
                        <td>
                            @if (Model.IsCurrentTerm)
                            {
                                @Html.EditorFor(model => Model.PeriodDates[i].EndDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => Model.PeriodDates[i].EndDate, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.EditorFor(model => Model.PeriodDates[i].EndDate, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (Model.IsCurrentTerm)
        {
            <div class="form-group">
                <div class="col-md-10">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>
        }
    </div>
}

<div>
    @Html.ActionLink("Back to list of terms", "Index")
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var startDateElements = $("[id$=__StartDate]");
            var endDateElements = $("[id$=__EndDate]");

            var minDate = $.datepicker.parseDate("mm/dd/yy", "@Model.Term.StartDate.ToShortDateString()");
            var maxDate = $.datepicker.parseDate("mm/dd/yy", "@Model.Term.EndDate.ToShortDateString()");
            var numOfPeriods = @Model.Periods.Count();

            startDateElements.each(function (index) {
                var dp = $(this);

                dp.datepicker({
                    showButtonPanel: true,
                    changeMonth: true,
                    changeYear: true,
                    numberOfMonths: 2
                });

                dp.datepicker("option", "minDate", minDate);
                dp.datepicker("option", "maxDate", maxDate);

                dp.on("change", function () {
                    var thisDate = getDate(this);
                    thisDate.setDate(thisDate.getDate() + 1);

                    for (var i = index + 1; i < numOfPeriods; i++) {
                        $(startDateElements[i]).datepicker("option", "minDate", thisDate);
                    }

                    for (var i = index; i < numOfPeriods; i++) {
                        $(endDateElements[i]).datepicker("option", "minDate", thisDate);
                    }
                });
            });

            endDateElements.each(function (index) {
                var dp = $(this);

                dp.datepicker({
                    showButtonPanel: true,
                    changeMonth: true,
                    changeYear: true,
                    numberOfMonths: 2
                });

                dp.datepicker("option", "minDate", minDate);
                dp.datepicker("option", "maxDate", maxDate);

                dp.on("change", function () {
                    var thisDate = getDate(this);
                    thisDate.setDate(thisDate.getDate() + 1);

                    for (var i = index + 1; i < numOfPeriods; i++) {
                        $(startDateElements[i]).datepicker("option", "minDate", thisDate);
                        $(endDateElements[i]).datepicker("option", "minDate", thisDate);
                    }
                });
            });

            var dateFormat = "mm/dd/yy";

            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }

                return date;
            }
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
}