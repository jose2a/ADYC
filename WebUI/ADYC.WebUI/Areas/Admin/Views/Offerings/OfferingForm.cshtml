@model ADYC.WebUI.ViewModels.OfferingFormViewModel

@{
    ViewBag.Title = Model.FormTitle;
    ViewBag.PageHeader = Model.FormTitle;

    ViewBag.BreadcrumbLinks = new Dictionary<string, string>
    {
        ["Offerings"] = Url.Action("View", new { TermId = Model.TermId }),
        [Model.FormTitle] = "",
    };

    ViewBag.ActiveBreadcrumb = Model.FormTitle;
}

@if (!Model.IsCurrentTerm)
{
    <div class="callout callout-info">
        <h4><i class="fa fa-info-circle"></i> Term</h4>

        <p>This term is not the current term, you are not allowed to make changes at this time.</p>
    </div>
}

@using (Html.BeginForm("Save", "Offerings", FormMethod.Post))
{

    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.TermId)
    @Html.HiddenFor(model => model.IsNew)

    @Html.AntiForgeryToken()

    <div class="box box-primary">

        @if (!Model.IsCurrentTerm)
        {
            <div class="box-header with-border">
                <div class="btn-toolbar">
                    <div class="btn-group">
                        <a href="@Url.Action("View", new { TermId = Model.TermId })" class="btn btn-default btn-sm"><i class="fa fa-arrow-circle-left"></i> Back to list of offerings</a>
                    </div>
                </div>
            </div>
        }

        <div class="box-body">
            @Html.ValidationSummary(true, "Please fix the following errors:", new { @class = "text-red" })

            <div class="form-group">
                @Html.LabelFor(model => model.Title)

                @if (Model.IsCurrentTerm)
                {
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-red" })
                }
                else
                {
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseId)

                @if (Model.IsCurrentTerm)
                {
                    @Html.DropDownListFor(model => model.CourseId, new SelectList(Model.Courses, "Id", ""), "Select Course", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-red" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.CourseId, new SelectList(Model.Courses, "Id", ""), "Select Course", new { @class = "form-control", disabled = "disabled" })
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProfessorId)

                @if (Model.IsCurrentTerm)
                {
                    @Html.DropDownListFor(m => m.ProfessorId, new SelectList(Model.Professors, "Id", ""), "Select Professor", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProfessorId, "", new { @class = "text-red" })
                }
                else
                {
                    @Html.DropDownListFor(m => m.ProfessorId, new SelectList(Model.Professors, "Id", ""), "Select Professor", new { @class = "form-control", disabled = "disabled" })
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TermId)

                @Html.DropDownListFor(m => m.TermId, new SelectList(Model.Terms, "Id", "Name"), new { @class = "form-control", @disabled = "disable" })
                @Html.ValidationMessageFor(model => model.TermId, "", new { @class = "text-red" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Location)

                @if (Model.IsCurrentTerm)
                {
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-red" })
                }
                else
                {
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OfferingDays)

                @Html.EditorFor(model => model.OfferingDays, new { htmlAttributes = new { @class = "form-control", @disabled = "disable" } })
                @Html.ValidationMessageFor(model => model.OfferingDays, "", new { @class = "text-red" })
            </div>
        </div>

        @if (Model.IsCurrentTerm)
        {
            <div class="box-footer">
                <a href="@Url.Action("View", new { TermId = Model.TermId })" class="btn btn-default">Cancel</a>
                <button class="btn btn-primary" type="submit">Save</button>
            </div>
        }
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}