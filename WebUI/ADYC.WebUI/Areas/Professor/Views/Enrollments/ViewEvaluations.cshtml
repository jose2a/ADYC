@model ADYC.WebUI.ViewModels.EnrollmentWithEvaluationsViewModel

@{
    var title = "Evaluations";

    ViewBag.Title = title;
    ViewBag.PageHeader = title;

    ViewBag.BreadcrumbLinks = new Dictionary<string, string>
    {
        ["Offerings (Terms)"] = Url.Action("Index"),
        ["Offerings (List)"] = Url.Action("ViewOfferings", new { termId = Model.Enrollment.Offering.TermId }),
        ["Enrollments"] = Url.Action("ViewEnrollments", new { offeringId = Model.Enrollment.OfferingId }),
        [title] = ""
    };

    ViewBag.ActiveBreadcrumb = title;
}

@if (!Model.IsCurrentTerm)
{
    <div class="callout callout-info">
        <h4><i class="fa fa-info-circle"></i> Term</h4>

        <p>This term is not the current term, you are not allowed to make changes at this time.</p>
    </div>
}

<div class="box box-info">
    <div class="box-header with-border">
        <h3 class="box-title">Offering</h3>
        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
        </div>
    </div>
    <div class="box-body">
        <dl class="dl-horizontal">
            <dt>Student</dt>
            <dd>@Model.Enrollment.Student</dd>
            <dt>Offering</dt>
            <dd>@Model.Enrollment.Offering.Title</dd>
            <dt>Course</dt>
            <dd>@Model.Enrollment.Offering.Course</dd>
            <dt>Term</dt>
            <dd>
                @Model.Enrollment.Offering.Term.Name (@Model.Enrollment.Offering.Term)
            </dd>
            <dt>Current Term</dt>
            <dd>@((Model.IsCurrentTerm) ? "Yes" : "No")</dd>
        </dl>
    </div>
</div>

@using (Html.BeginForm("SaveEvaluations", "Enrollments", FormMethod.Post))
{
    <div class="box box-primary">

        <div class="box-header with-border">
            <div class="btn-toolbar">
                <div class="btn-group">
                    <a href="@Url.Action("ViewEnrollments", new { offeringId = Model.Enrollment.OfferingId })" class="btn btn-default btn-sm"><i class="fa fa-arrow-circle-left"></i> Back to list of terms</a>
                </div>
            </div>
        </div>

        <div class="box-body">
            @Html.HiddenFor(m => Model.Enrollment.Id)

            @Html.ValidationSummary(true, "Please fix the following errors:", new { @class = "text-red" })

            <dl>
                <dt>Final Grade</dt>
                <dd>@Model.Enrollment.FinalGrade</dd>
                <dt>Final Grade (Letter)</dt>
                <dd>@Model.Enrollment.FinalGradeLetter</dd>
            </dl>

            <div class="form-group">
                @Html.LabelFor(m => m.Enrollment.Notes)

                @if (Model.IsCurrentTerm)
                {
                    @Html.EditorFor(model => model.Enrollment.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => Model.Enrollment.Notes, "", new { @class = "text-red" })
                }
                else
                {
                    @Html.EditorFor(model => model.Enrollment.Notes, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
            </div>

            <table class="table table-bordered table-hover table-striped dataTable" role="grid">
                <thead>
                    <tr>
                        <th>Period</th>
                        <th>Grade</th>
                        <th>Grade (Letter)</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>

                    @for (int i = 0; i < Model.Evaluations.Count; i++)
                    {
                        <tr>
                            <td>
                                @Html.HiddenFor(m => Model.Evaluations[i].PeriodId)
                                @Html.HiddenFor(m => Model.Evaluations[i].EnrollmentId)

                                @Model.Evaluations[i].Period.Name
                            </td>
                            <td>
                                @if (Model.IsCurrentTerm)
                                {
                                    @Html.EditorFor(model => Model.Evaluations[i].PeriodGrade, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => Model.Evaluations[i].PeriodGrade, "", new { @class = "text-red" })
                                }
                                else
                                {
                                    @Html.EditorFor(model => Model.Evaluations[i].PeriodGrade, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                }
                            </td>
                            <td>
                                @Html.EditorFor(model => Model.Evaluations[i].PeriodGradeLetter, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            </td>
                            <td>
                                @if (Model.IsCurrentTerm)
                                {
                                    @Html.EditorFor(model => Model.Evaluations[i].Notes, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => Model.Evaluations[i].Notes, "", new { @class = "text-red" })
                                }
                                else
                                {
                                    @Html.EditorFor(model => Model.Evaluations[i].Notes, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        if (Model.IsCurrentTerm)
        {
        <div class="box-footer">
            <button class="btn btn-primary" type="submit">Save</button>
        </div>
        }
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function () {

        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}
